---
description: Python (FastAPI & Pipecat) Guidelines
globs: server/**
---
# Python (FastAPI & Pipecat) Guidelines

## General Python & FastAPI Principles

- Write concise, clear code using def (synchronous) or async def (asynchronous) where needed.
- Use type hints for all function signatures and prefer Pydantic models for input/output validation.
- Follow the RORO (Receive an Object, Return an Object) pattern for functions accepting multiple parameters.
- Write early returns and guard clauses to handle edge cases in functions.
- Name variables, functions, and parameters using lowercase_with_underscores.
- Keep functions small and focused, using helper functions as necessary.
- Don't delete comments and docstrings when you edit code. Modify them as necessary but code that has been explained with comments needs to continue to be so explained post-modification.
- When asked for assistance in debugging, if you require additional context to make firm deductions, please make specific requests for this context in your response rather than making guesses.
- _Do not run the bot server; I'll handle that._

## FastAPI Specifics

- Organize code into routers, models (Pydantic), utilities, and static files:
  - Group related endpoints in appropriately named modules (e.g. routers/bot_routes.py).
  - Use FastAPI dependency injection for shared resources.
- Use descriptive HTTP status codes and HTTPException for proper error handling.
- Write clear startup and shutdown handlers â€“ use lifespan context managers where possible.
- Document endpoints with summary and description in route decorators.

## Pipecat and Bot Conventions

- Follow the Pipecat framework's architectural concepts: frames, processors, and pipelines.
- Write bots as small, modular services:
  - Separate business logic into individual functions.
  - Keep the orchestration of AI processing clear and sequential.
- Use logging (e.g., loguru) for debug and error traces, making sure to log key events.
- Organize bot-specific code in the `server/bots` package, with each bot (flow or simple) following a similar structure:
  - Setup services and transports clearly.
  - Use async patterns for I/O-bound operations.
- Clearly document transition points and actions performed along the bot pipeline:
  - Explain and comment on how frames are passed between processors.
  - Include instructions on error handling and recovery should any pipeline component fail.

## Testing and Error Handling

- Adopt an Arrange-Act-Assert structure for tests:
  - Write unit tests for each public function.
  - Use test doubles (mocks) for external API calls.
- Use early return patterns to reduce nesting on input validations and error conditions.
- Implement global error handling middleware or exception handlers in FastAPI.

## File Naming and Version Control

- Use snake_case filenames for Python scripts and modules (e.g., bot_framework.py, run_helpers.py).
- Ensure that build artifacts (e.g., .next or Docker build results) are excluded through .gitignore.
